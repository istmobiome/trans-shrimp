{
  "hash": "6919b748cb943d8e8958adb8c26a7d6c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data & Scripts\"\nlisting: \n  id: otu-listing\n  contents: listings/data-otu.yml\nmetadata-files: \n  - listings/_metadata.yml\n---\n\n\n::: column-body-outset-right\n\n::: {.cell}\n\n:::\n\n\n\n\nQuick access to pipeline processing scripts and raw data. With these scripts and associated data you can run the processing steps for each analysis. \n\nAll sequence data is linked to projects on the [European Nucleotide Archive (ENA)](https://www.ebi.ac.uk/ena/browser/). The scripts and associated files can be downloaded as `.zip` archives by clicking the links. Or if you prefer, you can copy the scripts directly from the code blocks below.  \n\n:::\n\n::: column-page-inset-right\n\n```{=html}\n\n<style type=\"text/css\">\n.nav-tabs {\n  margin-top: 0.5rem;\n  border-bottom: none;\n}\n\n.callout {\n  margin-top: 0;\n}\n\n.nav-tabs .nav-link {\n  text-align: center;\n  margin-right: 15px;\n  margin-top: 10px;\n  width: 147px;\n  font-size: 0.9em;\n  font-weight: 600;\n}\n\n.nav-tabs .nav-link, \n.nav-tabs .nav-link.active, \n.nav-tabs .nav-item.show .nav-link {\n  border: 1px solid  rgb(222, 226, 230);\n  border-radius: 10px;\n  color: rgb(80,146,221);\n}\n.nav-tabs .nav-link:hover {\n   border-color: rgb(80,146,221);\n   border-width: 1px;\n} \n\n.nav-tabs .nav-link.active, \n.nav-tabs .nav-item.show .nav-link {\n  border-color: rgb(80,146,221);\n  border-width: 2px;\n}\n\n.nav-tabs .nav-link i {\n  display: block;\n  font-size: 3rem;\n  color: rgb(80,146,221);\n  margin-bottom: 5px;\n}\n\n.quarto-listing {\n  margin-top: 2em;\n}\n\n.quarto-listing .listing-name,\n.quarto-listing .listing-author {\n  white-space: nowrap;\n}\n\n.quarto-listing .listing-actions-group h3 {\n  margin-top: 0;\n}\n\n \n</style>\n\n<ul id=\"index-chooser\" class=\"nav nav-tabs\" role=\"tablist\">\n  <li class=\"nav-item\" role=\"presentation\">\n    <a class=\"nav-link\" href=\"data-asv.html\">\n      <i class=\"bi bi-database-fill\"></i>\n      16S rRNA ASV processing\n    </a>\n  </li>\n  <li class=\"nav-item\" role=\"presentation\">\n    <a class=\"nav-link\" href=\"data-otu.html\">\n      <i class=\"bi bi-database-fill\"></i>\n      16S rRNA OTU processing\n    </a>\n  </li>\n  <li class=\"nav-item\" role=\"presentation\">\n    <a class=\"nav-link\" href=\"data-med.html\">\n      <i class=\"bi bi-database-fill\"></i>\n      16S rRNA MED processing\n    </a>\n  </li>\n  <li class=\"nav-item\" role=\"presentation\">\n    <a class=\"nav-link\" href=\"data-mg.html\">\n      <i class=\"bi bi-database-fill\"></i>\n      Metagenomic processing\n    </a>\n  </li>\n</ul>\n\n<script type=\"text/javascript\">\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  // get file name\n  const filename = window.location.pathname.split(\"/\").slice(-1)[0];\n\n  // latch active\n  const toolLinks = window.document.querySelectorAll(\"#index-chooser a\");\n  for (const tool of toolLinks) {\n    if (filename && filename !== \"index.html\") {\n      if (tool.href.endsWith(filename)) {\n        tool.classList.add(\"active\");\n      } \n    } else {\n      if (tool.href.endsWith(\"listing-filters.html\")) {\n        tool.classList.add(\"active\");\n      }\n    }\n  }\n  \n  // move heading into table\n  document.querySelector(\".listing-actions-group\").prepend(document.querySelector(\"h3.unlisted\"));\n});\n\n</script>\n```\n\n:::\n\n\n\n\n\n<br/>\n\n## OTU Data and Scripts {.unlisted}\n\n::: {#otu-listing .column-body-outset-right}\n:::\n\n## OTU Processing \n\nProcessing scripts for OTU analysis using [mothur](https://mothur.org/). All steps for processing are contained within a single [mothur batchfile](https://mothur.org/wiki/batch_mode/).\n\n### Scripts\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"true\" code-summary=\"Processing script for mothur OTU analysis\"}\nset.dir(output=pipelineFiles/)\nmake.file(inputdir=01_TRIMMED_DATA/, type=fastq, prefix=shrimp)\n\nmake.contigs(file=DATA/shrimp.files, processors=30)\nsummary.seqs(fasta=shrimp.trim.contigs.fasta, count=shrimp.contigs.count_table, processors=20, processors=30)\n\ncount.groups(count=shrimp.contigs.count_table, processors=30)\n\nscreen.seqs(fasta=shrimp.trim.contigs.fasta, count=shrimp.contigs.count_table, maxambig=0, minlength=252, maxlength=254, maxhomop=6, processors=30)\nsummary.seqs(fasta=shrimp.trim.contigs.good.fasta, count=shrimp.contigs.good.count_table, processors=30)\ncount.groups(count=shrimp.contigs.good.count_table)\nunique.seqs(fasta=shrimp.trim.contigs.good.fasta, count=shrimp.contigs.good.count_table)\nsummary.seqs(count=shrimp.trim.contigs.good.count_table, processors=30)\n\npcr.seqs(fasta=reference_dbs/silva.nr_v132.align, start=11895, end=25318, keepdots=F, processors=30)\n#############################################################\n#### ############  ARB-SILVA WEB ALIGNER   ##################\n#### from 13862 to 23445\n#############################################################\n\nrename.file(input=reference_dbs/silva.nr_v132.pcr.align, new=reference_dbs/silva.v4.fasta)\nsummary.seqs(fasta=reference_dbs/silva.v4.fasta, processors=30)\nalign.seqs(fasta=shrimp.trim.contigs.good.unique.fasta, reference=reference_dbs/silva.v4.fasta, processors=30)\nsummary.seqs(fasta=shrimp.trim.contigs.good.unique.align, count=shrimp.trim.contigs.good.count_table, processors=30)\n\nscreen.seqs(fasta=shrimp.trim.contigs.good.unique.align, count=shrimp.trim.contigs.good.count_table, start=1968, end=11550, processors=30)\n\nsummary.seqs(fasta=current, count=current, processors=30)\n\ncount.groups(count=current)\n\nfilter.seqs(fasta=shrimp.trim.contigs.good.unique.good.align, vertical=T, trump=., processors=30)\nunique.seqs(fasta=shrimp.trim.contigs.good.unique.good.filter.fasta, count=shrimp.trim.contigs.good.good.count_table)\ncount.groups(count=current, processors=30)\nsummary.seqs(fasta=shrimp.trim.contigs.good.unique.good.filter.unique.fasta, count=shrimp.trim.contigs.good.unique.good.filter.count_table, processors=30)\n\npre.cluster(fasta=shrimp.trim.contigs.good.unique.good.filter.unique.fasta, count=shrimp.trim.contigs.good.unique.good.filter.count_table, diffs=2, processors=30)\nsummary.seqs(fasta=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.fasta, count=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.count_table, processors=30)\ncount.groups(count=current, processors=30)\n\n#############################################################\n#### ############  REMOVE NEGATIVE CONTROL ##################\n#### from https://forum.mothur.org/t/negative-control/2754/16\n#############################################################\n\nget.groups(fasta=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.fasta, count=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.count_table, groups=Control_49-Control_23-Control_17-Control_24-Control_14-Control_44-Control_20-Control_33-Control_41-Control_29-Control_50-Control_22-Control_19-Control_18-Control_48-Control_13-Control_21-Control_16-Control_30-Control_5-Control_42-Control_25-Control_51-Control_40-Control_15-Control_36-Control_47-Control_27-Control_32-Control_8-Control_3-Control_4-Control_6-Control_45-Control_26-Control_46-Control_53-Control_7-Control_12-Control_10-Control_9-Control_35-Control_54-Control_2-Control_43-Control_1-Control_11-Control_52-Control_38-Control_34-Control_56-Control_37-Control_28-Control_57-Control_31-Control_39-Control_59-Control_55-Control_60-Control_58)\nrename.file(input=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, new=neg_control.fasta)\nrename.file(input=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.count_table, new=neg_control.count_table)\nsummary.seqs(fasta=neg_control.fasta, count=neg_control.count_table, processors=30)\nlist.seqs(count=neg_control.count_table)\n\n########################################################################################################\n### modified neg_control.count_table: \n### 1. remove first two rows\n### 2. in BBEdit run \\t\\d+,.*\n### 3. in R\n###     library(tidyverse)   \n###     a <- read_tsv(\"neg_control.count_table\")\n###     b <- read_tsv(\"shrimp.trim.contigs.good.unique.good.filter.unique.precluster.count_table\")\n###     e <- dplyr::left_join(a, b, by = \"Representative_Sequence\")\n###     write.table(e, \"results.txt\", row.names = FALSE, quote = FALSE, sep = \"\\t\")\n### 4. Replace accnos file with new list. Removed sequences that were found less than 10% in Neg control\n########################################################################################################\n    \nremove.seqs(accnos=neg_control.accnos, fasta=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.fasta, count=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.count_table)\n\n########################################################\n## REMOVED these NC samples from next remove.groups command\n## [ERROR]: Control_29 is not in your count table. Please correct.\n## [ERROR]: Control_18 is not in your count table. Please correct.\n## [ERROR]: Control_21 is not in your count table. Please correct.\n## [ERROR]: Control_5 is not in your count table. Please correct.\n## [ERROR]: Control_15 is not in your count table. Please correct.\n\nremove.groups(count=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.count_table, fasta=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, groups=Control_1-Control_10-Control_11-Control_12-Control_13-Control_14-Control_16-Control_17-Control_19-Control_2-Control_20-Control_22-Control_23-Control_24-Control_25-Control_26-Control_27-Control_28-Control_3-Control_30-Control_31-Control_32-Control_33-Control_34-Control_35-Control_36-Control_37-Control_38-Control_39-Control_4-Control_40-Control_41-Control_42-Control_43-Control_44-Control_45-Control_46-Control_47-Control_48-Control_49-Control_50-Control_51-Control_52-Control_53-Control_54-Control_55-Control_56-Control_57-Control_58-Control_59-Control_6-Control_60-Control_7-Control_8-Control_9)\n########################################################\n\nsummary.seqs(fasta=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta, count=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.count_table, processors=30)\n\ncount.groups(count=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.count_table)\n\n########################################\n### NEGATIVE CONTROLS Should be GONE ###\n########################################\n\nchimera.vsearch(fasta=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta, count=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.count_table, dereplicate=t, processors=30)\nsummary.seqs(fasta=current, count=current, processors=30)\ncount.groups(count=current, processors=30)\n\nclassify.seqs(fasta=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.fasta, count=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.count_table, processors=30, reference=reference_dbs/gsrdb.fasta, taxonomy=reference_dbs/gsrdb.tax)\n\nremove.lineage(fasta=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.fasta, count=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.count_table, taxonomy=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.gsrdb.wang.taxonomy, taxon=Chloroplast-Mitochondria-unknown-Eukaryota)\n\nsummary.tax(taxonomy=current, count=current)\ncount.groups(count=current, processors=30)\n\n##########################\nrename.file(fasta=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.pick.fasta, count=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.pick.count_table, taxonomy=shrimp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.denovo.vsearch.gsrdb.wang.pick.taxonomy, prefix=final)\n\n##########################\n###    CLUSTERING      ###\n##########################\n\n##########################\n###    cluster.split   ###\n##########################\n\ncluster.split(fasta=final.fasta, count=final.count_table, taxonomy=final.taxonomy, taxlevel=4, cluster=f, processors=30) \ncluster.split(file=final.file, count=final.count_table, processors=30)\n\nsystem(mkdir pipelineFiles/cluster.split.gsrdb)\nsystem(mv pipelineFiles/final.opti_mcc.list pipelineFiles/cluster.split.gsrdb/)\nsystem(mv pipelineFiles/final.file pipelineFiles/cluster.split.gsrdb/)\nsystem(mv pipelineFiles/final.dist pipelineFiles/cluster.split.gsrdb/)\n\n##########################\n###    cluster         ###\n##########################\n\ndist.seqs(fasta=final.fasta, cutoff=0.03, processors=30)\ncluster(column=final.dist, count=final.count_table)\n\nquit()\n\n```\n:::\n\n\n\nOnce you have the script and data you simply run the pipeline like so. \n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\nconda activate mothur\nmothur otu_batchfile_processing\n```\n:::\n\n\n\nIn the resources listed above, we include a table that summarizes read changes for each sample through the pipeline.\n\n\n\n::: {.column-body-outset-right}\n\n\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}