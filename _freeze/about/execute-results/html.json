{
  "hash": "8a1dc6bd9e2826332a6cf768d7a3f5f1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Website Build\"\ndescription: |\n  Notes on how this site was created using Quarto & hosted with GitHub Pages.\nformat:\n  html:\n    css: [\"/assets/css/styles_about.css\", \"/assets/css/styles.css\"]\n    toc: true\n    toc-depth: 3\nexecute:\n    echo: true\n    eval: false\n    warning: false\n    message: false\nlightbox: true\n---\n\n\n\n## Overview \n\nThis is how I created this website **a**) [Quarto](https://quarto.org/) to build the site and **b**) [GitHub Pages](https://pages.github.com/) to host the site. \n\n::: {.callout-caution}\nThis tutorial assumes you have **a**) [git installed](https://github.com/git-guides/install-git), **b**) a [GitHub account](https://github.com/join), **c)**  [RStudio installed](https://www.rstudio.com/products/rstudio/download/), and **d**) [Quarto](https://quarto.org/) for R installed. \n:::\n\nYou will need to jump back and forth between the RStudio IDE and a terminal. You can use the terminal in RStudio if you wish, it is up to you. \n\nThere are two main options for a GitHub Pages website. \n\n- A **user or organization site**.  \n- A **project site**.  \n\nI suggest you have a look at the [GitHub Pages](https://pages.github.com/) for more information but basically the difference between the two is that a **user/organization site** is a single site, like: \n\n```\nhttps://microbes.github.io/\n```\n\nand individual pages on this site are indexed like so: \n\n```\nhttps://microbes.github.io/about.html \n```\n\nA **project site** on the other hand is like a  collection of sites within a main site. A project site would have the same root URL, for example...\n\n```\nhttps://microbes.github.io/\n```\n\nbut each project would have it's own unique extension, like these examples:\n\n```\nhttps://microbes.github.io/deep-sea/   \nhttps://microbes.github.io/forest-soils/\n```\n\nIndividual pages within a project site would be indexed like this:\n\n```\nhttps://microbes.github.io/deep-sea/about.html\n```\n\nThe instructions here are for a GitHub Pages **project site**.\n\nFor more information see the [GitHub Pages](https://pages.github.com/) documentation.\n\n## Key Steps\n\nHere is an overview of what we will be doing in this tutorial:\n\n1) Create an organization on GitHub.\n2) Create two GitHub repos for the site\n    i) one to host the organization URL \n    ii) another to host the raw code **plus** the `gh-pages` branch.\n3) Clone the code repo to your computer.\n4) Create a `gh-pages` branch.\n5) Build the initial site with Quarto for R.\n6) Customize the default `_quarto.yml` file.\n7) Rebuild the site.\n8) Push changes to GitHub. \n\n## 1. GitHub Setup\n\n### Create organization on GitHub\n\n::: {.callout-tip}\nIf you already have an organization [skip to the next step](about.html#create-repos-for-the-site).\n:::\n\n**a**) In  the upper right-hand corner of your GitHub page click on your avatar and select `Your organizations`. \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step1.png){fig-align='center' width=95%}\n:::\n:::\n\n\n\n***\n\n**b**) On the page that opens, hit `New organization`.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step2.png){fig-align='center' width=95%}\n:::\n:::\n\n\n***\n\n**c**) Next, give your organization a name, provide an email address, and indicate whether  this is for a personal or institutional account. Then hit `Next`. \n\n\n::: {.callout-tip}\nThe name of the organization does not need to be the same as the website you create later.\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step3.png){fig-align='center' width=70%}\n:::\n:::\n\n\n***\n\n**d**) Here you can add additional community members such as collaborators. For now, just hit `Complete setup`. \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step4.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n***\n\n### Create repos for the site\n\nIn this section, we need to create two repositories for the site: **i**) one to host the organization URL (i.e., ht<span>tps://</span>istmobiome.github.io/) and **ii**) another to host the raw code (e.g. `.qmd` files) ***plus*** the `gh-pages` branch. More on that in a minute. I am including instructions for things you *MUST* do in order to get the rest of the tutorial to work properly. \n\n**a**) Hit the `Create a new repository button`. \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step5.png){fig-align='center' width=95%}\n:::\n:::\n\n\n\n***\n\n**b**) First, we create the *github.io repo* to host the main site.\n\nThere are a few things to do here:\n\n- Name the repo, Here we call it `istmobiome.github.io`. it doesn't matter what you call this but it **must** be unique and have the `.github.io` extension. \n- Make sure repo is **public**. \n- **You must** Initialize this repository with a **README File**. \n- Hit the `Create repository` button. This creates the `main` branch of the repo. \n\n::: {.callout-tip}\nNote: you can host a site on GitHub without the `github.io` extension but that is a more advanced skill and beyond the scope of this tutorial.\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step6.png){fig-align='center' width=95%}\n:::\n:::\n\n\n\n***\n\n**c**) Next, we create the *build repo* to host the project source code. These steps are similar to those described above.\n\n- Name the repo, here we call it `trans-shrimp`. This will be the **extension of the project site**. So this project's URL will be ht<span>tps://</span>istmobiome.github.io/trans-shrimp/. \n- Make sure the repo is **public**. \n- **You must** Initialize this repository with a **README File**. \n- Hit the `Create repository` button. This creates the `main` branch of the repo. \n\n> Note: you can make these repos private, however that is a bit more advanced and beyond the scope of the tutorial provided here :)\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step7.png){fig-align='center' width=95%}\n:::\n:::\n\n\n\n### Review\n\nHere is what we have so far:\n\nAn organization at [https://github.com/istmobiome/](https://github.com/istmobiome/) that contains 2 repos, one for the GitHub Pages root URL, [https://github.com/istmobiome/istmobiome.github.io](https://github.com/istmobiome/istmobiome.github.io) and another for the source code,  [https://github.com/istmobiome/trans-shrimp](https://github.com/istmobiome/trans-shrimp).  At this point both repos should only contain `README` files.\n\nWe also have two URLs, one for the *organiztion* site (ht<span>tps://</span>istmobiome.github.io/) and another  for the *project* site (ht<span>tps://</span>istmobiome.github.io/trans-shrimp/). \n\n***\n\n## 2. Local Setup \n\nNow that we have the main pieces in place of GitHub, it is time to setup everything on our local machine. \n\n### Clone the Code Repo\n\nLet's take a look at the `trans-shrimp` [repo page](https://github.com/istmobiome/trans-shrimp). There are two important things to point out. First, in the upper left corner is a box that says `main`. This is the primary branch for the repo and contains the source code for the site build (e.g., the `.qmd` files). This will become important in a moment when we create a branch called `gh-pages` that will link the build files (e.g., `.html` files) to the organization URL. More on that in a minute.\n\nFirst, we need to clone the `trans-shrimp`  repo from GitHub to our local machine. There are several ways to do this,  but I will show you how I do it. Navigate to the [repo page](https://github.com/istmobiome/trans-shrimp). At the time of creation, it looked like this:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step8.png){fig-align='center' width=95%}\n:::\n:::\n\n\n\n***\n\nSee the green button that says `Code`. Click on that button and copy the URL.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step9.png){fig-align='center' width=75%}\n:::\n:::\n\n\n\n***\n\nOpen a terminal window and navigate to a place where you want the repo to live on your computer. We will use the command `git clone` with the URL you just copied. Run the clone command and then `cd` into the directory.\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ngit clone https://github.com/istmobiome/trans-shrimp.git\ncd trans-shrimp/\n```\n:::\n\n\n\nNow have a look at the contents of the directory using the `ls` command. We want to append the command with the `-al` flag. The  `l` option provides extended details about each file/directory and the `a` option lists *hidden* files---files/directories that begin with a period and are hidden by default. \n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\nls -al\n```\n:::\n\n\n\nSo we have the `README.md` file that was generated when we created the repo and a hidden directory called `.git`. The `.git` directory is **super, super** important because this is how the remote repo (on GitHub) and the local repo (on your computer) keep track of changes. \n\n```\ntotal 8\ndrwxr-xr-x@  4 scottjj  923590601  128 May 13 08:25 .\ndrwxr-xr-x@  5 scottjj  923590601  160 May 13 08:25 ..\ndrwxr-xr-x@ 12 scottjj  923590601  384 May 13 08:25 .git\n-rw-r--r--@  1 scottjj  923590601   11 May 13 08:25 README.md\n```\n\n### Create a gh-pages branch\n\nGreat. We have the `trans-shrimp` repo cloned on our local machine. For historical reason, a GitHub Pages site needs to be built to a directory called `public/`. But we do not need to upload the `public/` build directory to the `main` branch on our repo. So, we are going to create a `.gitignore` file and add `public/` to that file. The `.gitignore` tells `git` to ignore whatever is listed in that file when it pushes local changes to the remote repository. As you build your site, you will need to add additional items to the `.gitignore` file.\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\necho public/ >> .gitignore # Add items as needed.\n```\n:::\n\n\n\nIf you run `ls -al` again you should see the `.gitignore` file is now listed in the directory. If you type `nano .gitignore` you can see the contents of the file. \n\nOK, now let's push the changes we made to the local branch (`origin`) to the remote branch (`main`). First, run:\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ngit status\n```\n:::\n\n\n\nHopefully you see the `.gitignore` file listed in red along with some other details. This means there are untracked files in your repo. Go ahead and run:\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ngit add --all\ngit status\n```\n:::\n\n\n\nNow you should see the same files in green. This means the files are staged and ready to commit. Now run:\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ngit commit -a -m \"initial commit\"\ngit push origin main\n```\n:::\n\n\n\nIf everything worked OK, your files have been pushed to the GitHub repo. Have  a look at the code repo on GitHub to confirm your changes have been pushed.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step9_1.png){fig-align='center' width=95%}\n:::\n:::\n\n\n\n***\n\nNow, it is important that there is no `public/` directory yet. Just to make sure there is no `public/` directory, we can run the remove command in our terminal.\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\nrm -rf public \n```\n:::\n\n\n\nNow we go through the steps to create the the `gh-pages` branch. \n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ngit checkout --orphan gh-pages\n```\n:::\n\n\n\n```\nSwitched to a new branch 'gh-pages'\n```\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ngit reset --hard\ngit commit --allow-empty -m \"Initializing gh-pages branch\"\n```\n:::\n\n\n\n```\n[gh-pages (root-commit) fd6028a] Initializing gh-pages branch\n```\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ngit push origin gh-pages\n```\n:::\n\n\n\n```\nEnumerating objects: 2, done.\nCounting objects: 100% (2/2), done.\nWriting objects: 100% (2/2), 180 bytes | 180.00 KiB/s, done.\nTotal 2 (delta 0), reused 0 (delta 0), pack-reused 0\nremote:\nremote: Create a pull request for 'gh-pages' on GitHub by visiting:\nremote:      https://github.com/istmobiome/trans-shrimp/pull/new/gh-pages\nremote:\nTo https://github.com/istmobiome/trans-shrimp.git\n * [new branch]      gh-pages -> gh-pages\n```\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ngit checkout main\n```\n:::\n\n\n\n```\nEnumerating objects: 2, done.\nCounting objects: 100% (2/2), done.\nWriting objects: 100% (2/2), 180 bytes | 180.00 KiB/s, done.\nTotal 2 (delta 0), reused 0 (delta 0), pack-reused 0\nremote:\nremote: Create a pull request for 'gh-pages' on GitHub by visiting:\nremote:      https://github.com/istmobiome/trans-shrimp/pull/new/gh-pages\nremote:\nTo https://github.com/istmobiome/trans-shrimp.git\n * [new branch]      gh-pages -> gh-pages\n(base) trans-shrimp: scottjj$ git checkout main\nSwitched to branch 'main'\nYour branch is up to date with 'origin/main'.\n```\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ngit worktree add -B gh-pages public origin/gh-pages\n```\n:::\n\n\n\n```\nPreparing worktree (resetting branch 'gh-pages'; was at fd6028a)\nBranch 'gh-pages' set up to track remote branch 'gh-pages' from 'origin'.\nHEAD is now at fd6028a Initializing gh-pages branch\n```\n\nNow run the following to see what is in the repo directory. \n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\nls -al\n```\n:::\n\n\n\n```\ndrwxr-xr-x@  6 scottjj  923590601  192 May 13 08:41 .\ndrwxr-xr-x@  5 scottjj  923590601  160 May 13 08:25 ..\ndrwxr-xr-x@ 14 scottjj  923590601  448 May 13 08:41 .git\n-rw-r--r--@  1 scottjj  923590601    8 May 13 08:40 .gitignore\n-rw-r--r--@  1 scottjj  923590601   11 May 13 08:40 README.md\ndrwxr-xr-x@  3 scottjj  923590601   96 May 13 08:41 public\n```\n\nThere should now be a `public/` directory. Run the following to make sure this is a `.git` directory.\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\nls -al public/\n```\n:::\n\n\n\n```\ntotal 8\ndrwxr-xr-x@ 3 scottjj  923590601   96 May 13 08:41 .\ndrwxr-xr-x@ 6 scottjj  923590601  192 May 13 08:41 ..\n-rw-r--r--@ 1 scottjj  923590601  104 May 13 08:41 .git\n```\n\n### Review\n\nAt this point all the pieces are in place to build your site and host it on GitHub. In addition to the repos you have on GitHub, you should have a local directory of the code repo, in our case it is called `trans-shrimp`. In this directory there should be a `README.md` file, a `.gitignore` file, a `.git` directory, and the `public/` directory. \n\n## 3. Site Build\n\nTime to build the site. As mentioned in the intro, we  will use  [Quarto](https://quarto.org/) to create  the website. To keep things simple, we will generate the  initial site in a temporary directory and copy the files to the git formatted directory at the end. \n\nOpen RStudio and hit `File >> New Project`. In the pop-up window hit `New Project`. \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step10.png){fig-align='center' width=75%}\n:::\n:::\n\n\n\n***\n\nThen  in the ***New Project Wizard*** select the `New Directory` option. \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step11.png){fig-align='center' width=75%}\n:::\n:::\n\n\n\n***\n\nUnder Project Type, scroll down until you see `Quarto Website` and select that option. \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step12.png){fig-align='center' width=75%}\n:::\n:::\n\n\n\n***\n\nGive the Directory a name and hit `Create Project`. Consider this an intermediate step in the process. We need to create a project directory to generate the initial site. Eventually we will copy all of these file to the directory of the repo we cloned earlier. You can call this something like `web` if you wish, it doesn't really matter since this is only a temporary directory.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step13.png){fig-align='center' width=75%}\n:::\n:::\n\n\n\n***\n\nNow, if everything worked OK, you should see that five files were created and two of the files are open in your RStudio IDE. \n\n-- `index.qmd`. This is the *landing* page of your site. This file is the first thing people see when they navigate to your site.   \n-- `_quarto.yml`. This is a [YAML](https://en.wikipedia.org/wiki/YAML) file and is used to configure your site. **DO NOT** erase this file.   \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step14.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n***\n\nIn fact, we need to edit the `_quarto.yml` file to configure it for our site. As you move further into building your site, you will need to make many modifications to this file. For now however, we will just focus on the minimum changes you need to make to get your site online. Go ahead and click on that file. This is what the default file looks like. \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step15.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n***\n\nFirst, below the `title` line (nested under `website`) add the following lines. \n\n```\nsite-url: https://istmobiome.github.io/trans-shrimp/\nrepo-url: https://github.com/istmobiome/trans-shrimp/\n```\n\nThe `site-url` is the `.github.io` URL we created way back when we created the [site repo](#create-repos-for-the-site). The `repo-url` is the repo we created to host the project source code.\n\nWhen you build or *render* your site, RStudio will dump all the site files (e.g., `.html` files) in the `output_dir`. The default output directory is `_site`, which RStudio generates when you render the site for the first time. I see no reason why you cannot leave the build directory as is but I prefer to call mine `public_build/`. Go ahead and add a line of the `_quarto.yml` file specifying the `output-dir`. This should be nested under `project` like so:\n\n```\nproject:\n  type: website\n  output-dir: public_build\n\n```\n\nGreat. One last thing to do. When you render your site, RStudio will try to add everything in the main directory to the output directory, in this case `public_build/`. There are many cases where this is not desirable. For example, let's say we have you have a directory called `sequence_data` that contains a bunch of `fastq` files. We do not need these files to build the site (and we probably do not want these on GitHub) so we need to tell RStudio to ignore these files when it builds the site. For that, we add the line `render` nested under `project`. Here we can specify what is, and is not, rendered when the site is build. As you get deeper into building your site, you will likely have many files/directories that you want excluded. \n\n> Don't get confused here. The `render` line in the `_quarto.yml` file is different than the `.gitignore` file discussed earlier. They do completely different  things. If this is unclear, go back and review the section on the `.gitignore` file. \n\nFor now, we will focus on the necessary things to include and exclude from the build. Items must be listed on separate lines, in double quotes. So let's say we want to render all `.qmd` files but ignore a few directories. The way to code this is that anything we want to exclude should begin with an exclamation point (`!`).  Go ahead and add these lines.\n\n```\nproject:\n  type: website\n  output-dir: public_build\n  render:\n    - \"*.qmd\"\n    - \"!public/\"\n    - \"!public_build/\"\n```\n\nOK, a little explanation. The first thing we need to exclude in the actual build directory `public_build/` (or `_site` if you kept the default). If we do not include this, RStudio will get stuck in a loop where it continues to add `public_build/` to the `public_build/` directory. Next, remember that to host a gh-pages site, the build files (e.g., the `.html` files) **must** be in a directory called `public/`. We created this directory when we created the `gh-pages` branch.  \n\n> So why don't we just make the buld directory `public/` instead of `public_build/` or `_site/`?\n\nGood question. The reason is that `public/` is a special directory that contains git related files (hidden by default). When we render a site, RStudio will first overwrite the output directory, thereby deleting the `.git` files, and then recreate the output directory add the new build files. This is not cool. To avoid this, we use an intermediate output directory, `public_build/` (or whatever you call it), to generate the site. Than we can copy all the files from the output directory to the `public/` directory without losing the `git` info. This is a little cumbersome but I have not yet found a workaround. That said, there may be an easier way to do this following the [GitHub Pages tutorial on Quarto](https://quarto.org/docs/publishing/github-pages.html). I will leave that up to you since I just found this tutorial and I am already too deep to change now. \n\nIf you changed the name of the default build directory, go ahead and remove the default directory now. In your terminal type:\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\nrm -r _site\n```\n:::\n\n\n\nNow, save all of your changes to the `_quarto.yml` file and in the RStudio Console run the following:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto::quarto_render()\n```\n:::\n\n\n\nYou should see a new directory called `public_build/`. Open that folder and double-click on `index.html`. The homepage of your new site should open in your default browser.  \n\n### Review\n\nSweet. Let's review what we have so far. From the \n\n- [1. GitHub Setup](#github-setup) we created two repos, one to host the `.github.io` organization and another to host the raw code (e.g. .qmd files) plus the gh-pages branch. \n\n- [2. Local Setup](#local-setup) we cloned the code repo and create a gh-pages branch in a directory called `public/`. \n\n- [3. Site Build](#site-build) we generated an initial site within a dummy directory, modified the `_quarto.yml` file, and re-rendered the site to an output directory called `public_build/`\n\n## Integration\n\nTime to push our changes to GitHub. The first step is to copy all of the files in your dummy site directory to the directory of the cloned repo (`trans-shrimp`). \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step16.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n***\n\nFirst, in your terminal, navigate to the cloned repo directory. Use the `pwd` command to confirm your location.\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\npwd\n```\n:::\n\n\n\n```\n/Users/scottjj/Dropbox (Smithsonian)/GITHUB_PROJECTS/TRANS-ISHMIAN/trans-shrimp\n```\n\nAssuming your directory structure  setup is similar to the image above, next run the following to copy all of the files. \n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ncp -r ../dummy/* .\n```\n:::\n\n\n\nNow take a look at the contents of the current working directory.\n\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\nls -al\n```\n:::\n\n\n\nIt should look something like this: \n\n```\ndrwxr-xr-x  14 scottjj  923590601   448 May 13 09:18 .\ndrwxr-xr-x@  7 scottjj  923590601   224 May 13 09:15 ..\n-rw-r--r--@  1 scottjj  923590601  6148 May 13 09:18 .DS_Store\n-rw-r--r--   1 scottjj  923590601    50 May 13 09:18 .Rhistory\ndrwxr-xr-x   4 scottjj  923590601   128 May 13 09:18 .Rproj.user\ndrwxr-xr-x@ 14 scottjj  923590601   448 May 13 08:41 .git\n-rw-r--r--@  1 scottjj  923590601     8 May 13 08:40 .gitignore\n-rw-r--r--@  1 scottjj  923590601    11 May 13 08:40 README.md\n-rw-r--r--   1 scottjj  923590601   202 May 13 09:18 _quarto.yml\n-rw-r--r--   1 scottjj  923590601    58 May 13 09:18 about.qmd\n-rw-r--r--   1 scottjj  923590601   145 May 13 09:18 index.qmd\n-rw-r--r--   1 scottjj  923590601    17 May 13 09:18 styles.css\ndrwxr-xr-x@  3 scottjj  923590601    96 May 13 08:41 public\ndrwxr-xr-x   7 scottjj  923590601   224 May 13 09:18 public_build\n-rw-r--r--   1 scottjj  923590601   225 May 13 09:18 web.Rproj\n```\n\nAt this point we need to do a few final housekeeping tasks. First, let's add a few additional files to the `.gitignore` file. \n\nRun this command in your terminal. You should only see the `public/` directory listed. \n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\nnano .gitignore\n```\n:::\n\n\n\nAdd the following lines, save the file, and exit `nano`.\n\n```\n.Rproj.user\n.Rhistory\n.RData\n.Ruserdata\n.Rapp.history\n.DS_Store\nweb.Rproj\n\npublic_build/\n```\n\n::: {.callout-not}\nIf you using macOS you may want to remove the `.DS_Store` directories before pushihng your build to GitHub. \n:::\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\nfind . -name \".DS_Store\" -print -delete\n```\n:::\n\n\n\nNow, remove everything from `public` and copy over all of the files from `public_build/`.\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\nrm -r public/*\ncp -r public_build/* public/\n```\n:::\n\n\n\nThen move into the `public/` directory and run `git status`.\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ncd public\ngit status\n```\n:::\n\n\n\nAll the untracked or changed files should be in red. \n\n```\nOn branch gh-pages\nYour branch is up to date with 'origin/gh-pages'.\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tabout.html\n\tindex.html\n\tsearch.json\n\tsite_libs/\n\tsitemap.xml\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n\nNow add the files to be committed and check the status again. \n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ngit add --all\ngit status\n```\n:::\n\n\n\nAll the untracked or changed files should now be green.\n\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n\n### Expand to see the output of `git status`\n\n```\nOn branch gh-pages\nYour branch is up to date with 'origin/gh-pages'.\n\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n\tnew file:   about.html\n\tnew file:   index.html\n\tnew file:   search.json\n\tnew file:   site_libs/anchor-4.2.2/anchor.min.js\n\tnew file:   site_libs/autocomplete-0.37.1/autocomplete.min.js\n\tnew file:   site_libs/bowser-1.9.3/bowser.min.js\n\tnew file:   site_libs/distill-2.2.21/template.v2.js\n\tnew file:   site_libs/font-awesome-5.1.0/css/all.css\n\tnew file:   site_libs/font-awesome-5.1.0/css/v4-shims.css\n\tnew file:   site_libs/font-awesome-5.1.0/webfonts/fa-brands-400.eot\n\tnew file:   site_libs/font-awesome-5.1.0/webfonts/fa-brands-400.svg\n\tnew file:   site_libs/font-awesome-5.1.0/webfonts/fa-brands-400.ttf\n\tnew file:   site_libs/font-awesome-5.1.0/webfonts/fa-brands-400.woff\n\tnew file:   site_libs/font-awesome-5.1.0/webfonts/fa-brands-400.woff2\n\tnew file:   site_libs/font-awesome-5.1.0/webfonts/fa-regular-400.eot\n\tnew file:   site_libs/font-awesome-5.1.0/webfonts/fa-regular-400.svg\n\tnew file:   site_libs/font-awesome-5.1.0/webfonts/fa-regular-400.ttf\n\tnew file:   site_libs/font-awesome-5.1.0/webfonts/fa-regular-400.woff\n\tnew file:   site_libs/font-awesome-5.1.0/webfonts/fa-regular-400.woff2\n\tnew file:   site_libs/font-awesome-5.1.0/webfonts/fa-solid-900.eot\n\tnew file:   site_libs/font-awesome-5.1.0/webfonts/fa-solid-900.svg\n\tnew file:   site_libs/font-awesome-5.1.0/webfonts/fa-solid-900.ttf\n\tnew file:   site_libs/font-awesome-5.1.0/webfonts/fa-solid-900.woff\n\tnew file:   site_libs/font-awesome-5.1.0/webfonts/fa-solid-900.woff2\n\tnew file:   site_libs/fuse-6.4.1/fuse.min.js\n\tnew file:   site_libs/header-attrs-2.11/header-attrs.js\n\tnew file:   site_libs/headroom-0.9.4/headroom.min.js\n\tnew file:   site_libs/jquery-3.6.0/jquery-3.6.0.js\n\tnew file:   site_libs/jquery-3.6.0/jquery-3.6.0.min.js\n\tnew file:   site_libs/jquery-3.6.0/jquery-3.6.0.min.map\n\tnew file:   site_libs/popper-2.6.0/popper.min.js\n\tnew file:   site_libs/tippy-6.2.7/tippy-bundle.umd.min.js\n\tnew file:   site_libs/tippy-6.2.7/tippy-light-border.css\n\tnew file:   site_libs/tippy-6.2.7/tippy.css\n\tnew file:   site_libs/tippy-6.2.7/tippy.umd.min.js\n\tnew file:   site_libs/webcomponents-2.0.0/webcomponents.js\n\tnew file:   sitemap.xml\n```\n\n:::\n\n\nCommit the files.\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ngit commit -m \"Publishing to gh-pages initial commit\"\n```\n:::\n\n\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n\n### Expand to see the output of `git commit`\n\n```\n[gh-pages f30f1ff] Publishing to gh-pages initial commit\n 37 files changed, 22182 insertions(+)\n create mode 100644 about.html\n create mode 100644 index.html\n create mode 100644 search.json\n create mode 100644 site_libs/anchor-4.2.2/anchor.min.js\n create mode 100644 site_libs/autocomplete-0.37.1/autocomplete.min.js\n create mode 100644 site_libs/bowser-1.9.3/bowser.min.js\n create mode 100644 site_libs/distill-2.2.21/template.v2.js\n create mode 100644 site_libs/font-awesome-5.1.0/css/all.css\n create mode 100644 site_libs/font-awesome-5.1.0/css/v4-shims.css\n create mode 100644 site_libs/font-awesome-5.1.0/webfonts/fa-brands-400.eot\n create mode 100644 site_libs/font-awesome-5.1.0/webfonts/fa-brands-400.svg\n create mode 100644 site_libs/font-awesome-5.1.0/webfonts/fa-brands-400.ttf\n create mode 100644 site_libs/font-awesome-5.1.0/webfonts/fa-brands-400.woff\n create mode 100644 site_libs/font-awesome-5.1.0/webfonts/fa-brands-400.woff2\n create mode 100644 site_libs/font-awesome-5.1.0/webfonts/fa-regular-400.eot\n create mode 100644 site_libs/font-awesome-5.1.0/webfonts/fa-regular-400.svg\n create mode 100644 site_libs/font-awesome-5.1.0/webfonts/fa-regular-400.ttf\n create mode 100644 site_libs/font-awesome-5.1.0/webfonts/fa-regular-400.woff\n create mode 100644 site_libs/font-awesome-5.1.0/webfonts/fa-regular-400.woff2\n create mode 100644 site_libs/font-awesome-5.1.0/webfonts/fa-solid-900.eot\n create mode 100644 site_libs/font-awesome-5.1.0/webfonts/fa-solid-900.svg\n create mode 100644 site_libs/font-awesome-5.1.0/webfonts/fa-solid-900.ttf\n create mode 100644 site_libs/font-awesome-5.1.0/webfonts/fa-solid-900.woff\n create mode 100644 site_libs/font-awesome-5.1.0/webfonts/fa-solid-900.woff2\n create mode 100644 site_libs/fuse-6.4.1/fuse.min.js\n create mode 100644 site_libs/header-attrs-2.11/header-attrs.js\n create mode 100644 site_libs/headroom-0.9.4/headroom.min.js\n create mode 100644 site_libs/jquery-3.6.0/jquery-3.6.0.js\n create mode 100644 site_libs/jquery-3.6.0/jquery-3.6.0.min.js\n create mode 100644 site_libs/jquery-3.6.0/jquery-3.6.0.min.map\n create mode 100644 site_libs/popper-2.6.0/popper.min.js\n create mode 100644 site_libs/tippy-6.2.7/tippy-bundle.umd.min.js\n create mode 100644 site_libs/tippy-6.2.7/tippy-light-border.css\n create mode 100644 site_libs/tippy-6.2.7/tippy.css\n create mode 100644 site_libs/tippy-6.2.7/tippy.umd.min.js\n create mode 100644 site_libs/webcomponents-2.0.0/webcomponents.js\n create mode 100644 sitemap.xml\n```\n\n:::\n\nAnd finally push the files to the gh-pages branch.\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ngit push origin gh-pages\n```\n:::\n\n\n\n```\nEnumerating objects: 55, done.\nCounting objects: 100% (55/55), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (45/45), done.\nWriting objects: 100% (54/54), 1.37 MiB | 348.00 KiB/s, done.\nTotal 54 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), done.\nTo https://github.com/istmobiome/trans-shrimp.git\n   fd6028a..f30f1ff  gh-pages -> gh-pages\n``` \n\nDo the same for the build files. Make sure you back out of the public directory with the `cd ../` command. This time you are pushing to the `main` branch, not the `gh-pages` branch.\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ncd ../\ngit status\ngit add --all\ngit status\ngit commit -m \"Publishing to gh-pages initial commit\"\ngit push origin main\n```\n:::\n\n\n\nNow head over to your GitHub code repo and look at the two branches to make sure everything looks good. In this case, https://github.com/istmobiome/trans-shrimp. You should see the `main` branch of this repo---this contains all of the `.qmd` files. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step17.png){fig-align='center' width=95%}\n:::\n:::\n\n\n\n*** \n\nFind the button in the upper left that says `main`. Click on that and select `gh-pages`. \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step18.png){fig-align='center' width=75%}\n:::\n:::\n\n\n\n***\n\nThe `gh-pages` branch contains all of the `.html` files. \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](include/about/step19.png){fig-align='center' width=95%}\n:::\n:::\n\n\n\n*** \n\nWait a few minutes and navigate to your project webpage. In our case, https://istmobiome.github.io/trans-shrimp/.\n\nYou site should be LIVE.\n\n## Adding content\n\nMost of the steps up to this point **should only need to be done once**. Now it is time to add content to your site, customize the look, etc. From this point forward, whenever you make changes that you want to make public, you need to do the following:\n\n1) Render the site.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto::quarto_render()\n```\n:::\n\n\n\nOr to build individual pages run:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto::quarto_render(\"new_page.qmd\")\n```\n:::\n\n\n\n2) Copy files from `public_build/` to `public/`\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ncp -r public_build/* public/\n```\n:::\n\n\n\n3) Commit and push the changes to the `gh-pages` branch.\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ncd public/\ngit status\ngit add --all\ngit status\ngit commit -m \"added new page\"\ngit push origin gh-pages\n```\n:::\n\n\n\n4) Commit and push the changes to the `main` branch.\n\n\n\n::: {.cell}\n\n```{.zsh .cell-code}\ncd ../\ngit status\ngit add --all\ngit status\ngit commit -m \"added new page\"\ngit push origin main\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}